/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'MisakaNetwork' at '20-7-1 上午10:20' with Gradle 2.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
    }
}

def denyProject = ['']

//-------------------------------------------------------
configure(allprojects) { project ->
    if (project.name in denyProject) {
        return
    }
    apply plugin: 'java'
    sourceCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
    ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
    ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
    dependencies {
        compile jarTree
    }

    //以下为需要boot启动的项目

    apply plugin: 'spring-boot'

    dependencies {
         compile 'org.springframework.boot:spring-boot-starter'
         compile 'org.springframework.boot:spring-boot-starter-logging'
         compile 'org.springframework.boot:spring-boot-starter-web'

        // compile "org.springframework.boot:spring-boot-starter-data-rest"
        // compile('org.springframework.boot:spring-boot-starter-aop')

        //DB
        // compile('org.springframework.boot:spring-boot-starter-data-jpa')
        // compile('org.springframework.boot:spring-boot-starter-jdbc')
        // compile('mysql:mysql-connector-java:5.1.38')

        //辅助工具
        // compile 'com.google.guava:guava:19.0'
        //http工具
        // compile 'org.apache.httpcomponents:httpasyncclient:4.1.1'

        //json转换工具
        // compile 'com.google.code.gson:gson:2.3.1'

        //per4j 日志输出方法的运行时间
        // compile 'org.perf4j:perf4j:0.9.16'

        //swagger
        // compile('com.mangofactory:swagger-springmvc:0.9.5')

        // compile 'org.springframework.boot:spring-boot-starter-test'
        // compile('junit:junit:4.12')
//        compile('org.springframework:spring-test:4.2.4.RELEASE')

    }

    task createJavaProject << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}
